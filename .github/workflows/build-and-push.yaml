name: Build and Push Debug Images

on:
  push:
    branches: [ "main" ]
  # from doc: Notifications for scheduled workflows are sent to the user who last modified the cron syntax
  # in the workflow file. https://docs.github.com/en/actions/reference/workflows-and-actions/events-that-trigger-workflows
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORGANISATION: gepardec

jobs:
  # Job 1: Build and push the base image first
  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Hash Dockerfile
        id: file_hash
        run: |
          # Calculate a sha256 hash and take the first 8 characters
          echo "sha=$(shasum -a 256 images/base-debug/Containerfile | head -c 8)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANISATION }}/debug-images/base-debug
          tags: |
            # Tag with 'latest'
            type=raw,value=latest,enable=true
            # Tag with a short hash of the Containerfile calculated in a previous step
            type=raw,value=cf-${{ steps.file_hash.outputs.sha }},enable=true

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/base-debug/Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Job 2: Build dependent images after the base-debug image is ready
  build-dependent-images:
    # This 'needs' key ensures this job only runs after 'build-base' succeeds
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      # This matrix now only contains images that depend on the base image
      matrix:
        image: [network-debug] # Add future images like 'java-debug' here

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Hash Dockerfile
        id: file_hash
        run: |
          # Calculate a sha256 hash and take the first 8 characters
          echo "sha=$(shasum -a 256 images/${{ matrix.image }}/Containerfile | head -c 8)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANISATION }}/debug-images/${{ matrix.image }}
          tags: |
            # Tag with 'latest'
            type=raw,value=latest,enable=true
            # Tag with a short hash of the Containerfile calculated in a previous step
            type=raw,value=cf-${{ steps.file_hash.outputs.sha }},enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/${{ matrix.image }}/Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # This build-arg now safely references the base image pushed in the previous job
#          build-args: |
#            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/base:latest