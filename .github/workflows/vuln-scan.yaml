name: Scan Images for Vulnerabilities

# This workflow runs on every pull request that targets the 'main' branch
on:
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 7 * * 1'
  workflow_dispatch:

jobs:
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest

    # Use a matrix to scan all images in parallel
    strategy:
      fail-fast: false
      matrix:
        image: [base-debug, network-debug] # Add future image names here

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # We need to build the image locally so Trivy can scan it
      - name: Build image for scanning
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/${{ matrix.image }}/Dockerfile
          # Load the image into the local Docker daemon, don't push it
          load: true
          # Generate a temporary, unique tag for the local image
          tags: local-scan/${{ matrix.image }}:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          # Scan the image that was just built
          image-ref: 'local-scan/${{ matrix.image }}:${{ github.sha }}'
          scan-type: 'image'
          # Display all vulnerabilities, but fail the workflow for HIGH or CRITICAL ones
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        # Always run this step, even if the Trivy scan fails
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'